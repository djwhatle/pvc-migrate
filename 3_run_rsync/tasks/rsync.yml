###
# required
# pvc_namespace
# pvc_name
# volume_name
# bound_pod_uid
# failed_pvcs: []
# successful_pvcs: []
# node_name
# mig_source_host:

- set_fact:
    mig_source_data_base_location: "/var/lib/origin/openshift.local.volumes"
    mig_source_data_location_k8s_mount: "kubernetes.io~glusterfs"
    mig_dest_ssh_key_remote_location: "~/.ssh/dest_key"
    
# Start tasks delegated to source node
- name: "Ensure .ssh directory on source node"
  vars:
    mig_source_host: "{{ item.node_name }}"
  delegate_to: "{{ mig_source_host|mandatory }}"
  file:
    path: "~/.ssh"
    state: directory
  ignore_errors: true
  become: yes
  with_items: "{{ pvc_batch }}"
  

- name: "Copying private key to source node"
  vars:
    mig_source_host: "{{ item.node_name }}"
  delegate_to: "{{ mig_source_host|mandatory }}"
  copy:
    src: "{{ mig_dest_ssh_private_key|mandatory }}"
    dest: "{{ mig_dest_ssh_key_remote_location }}"
    mode: 0600
  ignore_errors: true
  become: yes
  with_items: "{{ pvc_batch }}"
  

- name: "Wait for load balancer DNS entry"
  vars:
    mig_source_host: "{{ item.node_name }}"
    mig_dest_service_url: "{{ svc.resources[0].status.loadBalancer.ingress[0].hostname }}"
  delegate_to: "{{ mig_source_host|mandatory }}"
  shell: "nslookup {{ mig_dest_service_url }}"
  ignore_errors: true
  register: dig_output
  until: dig_output.rc == 0
  retries: 100
  delay: 3
  with_items: "{{ pvc_batch }}"
  
- name: "Synchronizing files. This may take a while... [rsync_batch_size={{ rsync_batch_size }}] "
  async: "{{ rsync_timeout }}"
  register: async_results
  poll: 0
  vars:
    mig_source_host: "{{ item.node_name }}"
    mig_source_data_location: "{{ mig_source_data_base_location }}/pods/{{ item.bound_pod_uid }}/volumes/{{ mig_source_data_location_k8s_mount }}/{{ item.volume_name }}/"
    mig_dest_service_url: "{{ svc.resources[0].status.loadBalancer.ingress[0].hostname }}"
    mig_dest_data_location: "/mnt/{{ item.pvc_namespace }}/{{ item.pvc_name }}"
  delegate_to: "{{ mig_source_host|mandatory }}"
  shell: "rsync -aPvvH {{ mig_source_data_location }} -e 'ssh -p 2222 -o StrictHostKeyChecking=no -i {{ mig_dest_ssh_key_remote_location }}' {{ mig_dest_ssh_user }}@{{ mig_dest_service_url }}:{{ mig_dest_data_location }}"
  ignore_errors: true
  become: yes
  with_items: "{{ pvc_batch }}"

- name: "Wait for rsync jobs to finish [rsync_timeout={{ rsync_timeout }}]"
  vars: 
    mig_source_host: "{{ item.item.node_name }}"
  delegate_to: "{{ mig_source_host|mandatory }}"
  async_status: 
    jid: "{{ item.ansible_job_id }}"
  register: status_result
  until: status_result.finished
  retries: "{{ (rsync_timeout|int / 5) | int}}"
  delay: 5
  become: yes
  with_items: "{{ async_results.results }}"

- name: "Removing private key from source node"
  vars:
    mig_source_host: "{{ item.node_name }}"
  delegate_to: "{{ mig_source_host|mandatory }}"
  file:
    path: "{{ mig_dest_ssh_key_remote_location }}"
    state: absent
  ignore_errors: true
  become: yes
  with_items: "{{ pvc_batch }}"
# End tasks delegated to source node 

- name: "Collect list of failed PVCs from batch"
  vars:
    failed_pvc:
      - name: "{{ item.item.item.pvc_name}}"
        namespace: "{{ item.item.item.pvc_namespace }}"
        stdout: "{{ item.stdout }}"
        stderr: "{{ item.stderr }}"
        rc: "{{ item.rc }}"
  set_fact:
    failed_pvcs: "{{ failed_pvcs +  failed_pvc }}"
  when: item.rc != 0
  with_items: "{{ status_result.results }}"

- name: "Collect list of successful PVCs from batch"
  vars:
    successful_pvc:
      - name: "{{ item.item.item.pvc_name}}"
        namespace: "{{ item.item.item.pvc_namespace }}"
        stdout: "{{ item.stdout }}"
        stderr: "{{ item.stderr }}"
        rc: "{{ item.rc }}"
  set_fact:
    successful_pvcs: "{{ successful_pvcs +  successful_pvc }}"
  when: item.rc == 0
  with_items: "{{ status_result.results }}"
